{"version":3,"sources":["dbservice.js","main.js","modal.js","movie.js"],"names":[],"mappingshfile":"main.js","sourcesContent":["const DBservice = class {\n  constructor() {\n    this.rebuildActions = {\n      moviesList: ({\n        id,\n        title,\n        popularity,\n        genres,\n        overview,\n        poster_path,\n        backdrop_path,\n        release_date,\n        vote_average,\n        homepage\n      }) => ({\n        type: 'moviesList',\n        id,\n        title,\n        popularity,\n        genres,\n        overview,\n        poster_path,\n        backdrop_path,\n        release_date,\n        vote_average,\n        homepage\n      }),\n      tvShowsList: ({\n        id,\n        name,\n        backdrop_path,\n        genres,\n        overview,\n        popularity,\n        poster_path,\n        vote_average,\n        first_air_date,\n        homepage\n      }) => ({\n        type: 'tvShowsList',\n        id,\n        title: name,\n        backdrop_path,\n        genres,\n        overview,\n        popularity,\n        poster_path,\n        vote_average,\n        release_date: first_air_date,\n        homepage\n      }),\n    }\n  }\n\n  getData = async (url) => {\n    const res = await fetch(url);\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw new Error(`Не удалось получить данные по адресу ${url}`)\n    }\n  }\n\n  getApiKey = () => '20ba111713def543aaca200d5d47a284';\n  getServerPath = () => 'https://api.themoviedb.org/3';\n\n  getSearchResult = (query, language) => {\n    this.temp = `${this.getServerPath()}/search/movie?api_key=${this.getApiKey()}&language=${language}&query=${query}`;\n    return this.getData(this.temp);\n  };\n\n  generateFullData = (type) => async (data) => {\n    const fullData = [];\n    const pagesCount = data.total_pages;\n    const currentPageResults = data.results;\n    fullData.push(...currentPageResults)\n    if (pagesCount > 1) {\n      for (let i = 2; i <= pagesCount; i += 1) {\n        const nextPageResults = await this.getNextPage(i);\n        fullData.push(...nextPageResults.results)\n      }\n    };\n\n    const modifiedData = fullData.map((n) => {\n      return this.rebuildActions[type](n);\n    })\n    return modifiedData;\n  }\n\n  getmoviesList = async (query, language) => {\n    this.temp = `${this.getServerPath()}/search/movie?api_key=${this.getApiKey()}&language=${language}&query=${query}`;\n    const result = await this.getData(this.temp);\n    const rebuildedData = await this.generateFullData('moviesList')(result);\n    return rebuildedData;\n  };\n\n  gettvShowsList = (query, language) => {\n    this.temp = `${this.getServerPath()}/search/tv?api_key=${this.getApiKey()}&language=${language}&query=${query}`;\n    const result = this.getData(this.temp)\n      .then(this.generateFullData('tvShowsList'))\n    return result;\n  };\n\n  getNextPage = (page) => {\n    return this.getData(`${this.temp}&page=${page}`);\n  }\n\n  getItemInfo = (id, itemType, type, language) => {\n    const result = this.getData(`${this.getServerPath()}/${itemType}/${id}?api_key=${this.getApiKey()}&language=${language}`).then(this.rebuildActions[type]);\n    return result;\n  }\n}\n","const form = document.querySelector('.header__form');\nconst movies = document.querySelector('.movies');\nconst moviesList = document.querySelector('.movies__list');\nconst tvShowsList = document.querySelector('.tvshows__list');\nconst filters = document.querySelectorAll('.js__filter');\nconst resultTabs = document.querySelectorAll('.search__result');\n\nconst elements = {\n  body: document.body,\n  header: document.querySelector('.header'),\n  headerContent: document.querySelector('.header__content'),\n  moviesList: document.querySelector('.movies__list'),\n  tvShowsList: document.querySelector('.tvshows__list'),\n  moviesPaginationList: document.querySelector('.movies__pagination-list'),\n  moviesSizeList: document.querySelector('.movies__size-list'),\n  preloader: document.querySelector('.preloader'),\n  filters: document.querySelector('.filters'),\n  filter: document.querySelectorAll('.filter'),\n  filtersTitle: document.querySelector('.filters__title'),\n  tabsPanel: document.querySelector('.movies__tab'),\n  tabsTitles: document.querySelectorAll('.movies__tab-item'),\n  modal: document.querySelector('.modal'),\n};\n\nconst showPreloader = () => {\n  elements.preloader.style.display = 'flex';\n};\n\nconst hidePreloader = () => {\n  elements.preloader.style.display = 'none';\n};\n\nconst app = () => {\n  const getBtnsParametrs = {\n    number: () => ['.movies__pagination-link', 'number', 'currentPage'],\n    size: () => ['.movies__size-link', 'size', 'resultSize']\n  }\n\n  const navigationListClickHandler = (e) => {\n    e.preventDefault();\n    const target = e.target.closest('.btn-nav');\n    const taretType = target.dataset.type;\n    const [className, dataName, stateKey] = getBtnsParametrs[taretType]();\n    if (target) {\n      state[stateKey] = parseInt(target.dataset[dataName], 10);\n      if (taretType === 'size') {\n        state.currentPage = 1;\n      }\n    }\n    render();\n  }\n\n  const buildPaginationItem = (index, isExtreme = undefined) => {\n    const extremeTag = (isExtreme) ? isExtreme : '';\n    const pagiationListItem = document.createElement('li');\n    pagiationListItem.innerHTML = `<a href=\"\" data-type=\"number\" data-number=\"${index}\" class=\"btn btn-nav movies__pagination-link\">${index}</a>`;\n    pagiationListItem.className = `${extremeTag} movies__pagination-item`;\n    return pagiationListItem;\n  }\n\n  const setActiveNavigationElement = ([className, dataName, stateKey]) => {\n    const elements = document.querySelectorAll(className);\n    elements.forEach((element) => {\n      element.classList.remove('active');\n      if (parseInt(element.dataset[dataName], 10) === state[stateKey]) {\n        element.classList.add('active');\n      }\n    })\n  }\n\n  const renderPaginationList = (listName) => {\n    if (state[listName].length === 0) {\n      elements.moviesSizeList.style.display = 'none';\n    } else {\n      elements.moviesSizeList.style.display = 'flex';\n    }\n    elements.moviesPaginationList.textContent = '';\n    const pageCount = Math.ceil(state[listName].length / state.resultSize);\n    const fragment = document.createDocumentFragment();\n    if (pageCount >= 6) {\n      fragment.append(buildPaginationItem(1));\n      const minIndex = Math.min(pageCount - 3, (Math.max(2, state.currentPage - 1)));\n      const maxIndex = Math.max(4, (Math.min(state.currentPage + 1, pageCount - 1)))\n      for (i = minIndex; i <= maxIndex; i += 1) {\n        if (state.currentPage >= 4 && i === minIndex) {\n          fragment.append(buildPaginationItem(i, 'first'));\n        } else if (state.currentPage <= pageCount - 3 && i === maxIndex) {\n          fragment.append(buildPaginationItem(i, 'last'));\n        } else {\n          fragment.append(buildPaginationItem(i));\n        }\n      };\n      fragment.append(buildPaginationItem(pageCount));\n    } else {\n      for (let i = 1; i <= pageCount; i += 1) {\n        fragment.append(buildPaginationItem(i));\n      }\n    }\n    elements.moviesPaginationList.append(fragment);\n    setActiveNavigationElement(getBtnsParametrs.number());\n    setActiveNavigationElement(getBtnsParametrs.size());\n  }\n\n  const getCurrentPageMovieList = (listName) => {\n    const firstIndex = state.currentPage * state.resultSize - state.resultSize;\n    const lastDataIndex = state[listName].length - 1;\n    const lastIndex = (state.currentPage * state.resultSize > lastDataIndex) ? lastDataIndex : state.currentPage * state.resultSize - 1;\n    return [firstIndex, lastIndex];\n  }\n\n  const renderTabTitles = () => {\n    const actions = {\n      moviesList: () => `Movies (${state.moviesList.length})`,\n      tvShowsList: () => `TV Shows (${state.tvShowsList.length})`,\n    }\n    elements.tabsTitles.forEach((tab) => {\n      const tabName = tab.dataset.type;\n      tab.innerText = actions[tabName]();\n    })\n  }\n\n  const renderList = (listName) => {\n    const [firstIndex, lastIndex] = getCurrentPageMovieList(listName);\n    elements[listName].textContent = '';\n    const messageTitle = document.createElement('h2');\n    messageTitle.className = 'movies__title';\n    const message = (state[listName].length === 0) ? 'По вашему запрсу ничего не найдено' : `Было найдено ${state[listName].length} элемента`\n    messageTitle.textContent = message;\n    elements[listName].append(messageTitle);\n    if (state[listName].length !== 0) {\n      const itemList = document.createElement('ul');\n      itemList.className = 'item__list';\n      for (let i = firstIndex; i <= lastIndex; i += 1) {\n        const {\n          id,\n          title,\n          popularity,\n          genres,\n          overview,\n          poster_path,\n          backdrop_path,\n          release_date,\n          vote_average\n        } = state[listName][i];\n        const movie = new Movie(id, title, popularity, genres, overview, poster_path, backdrop_path, release_date, vote_average);\n        itemList.append(movie.renderMovieCard());\n      };\n      elements[listName].append(itemList);\n    }\n  }\n\n  const render = () => {\n\n    hidePreloader();\n    renderList('moviesList');\n    renderList('tvShowsList');\n    renderTabTitles();\n    renderPaginationList(state.sorting.type);\n\n  }\n\n  const filtersActions = {\n    lang: () => {\n      getData(state.query, state);\n    },\n    type: () => {\n      resultTabs.forEach((tab) => {\n        tab.classList.remove('search__result--active');\n        if (tab.id === state.sorting.type) {\n          tab.classList.add('search__result--active');\n        }\n      })\n      state.currentPage = 1;\n      renderPaginationList(state.sorting.type);\n      renderList(state.sorting.type)\n    },\n    popularity: () => {\n      switch (state.sorting.popularity) {\n        case 'more':\n          state[state.sorting.type].sort((b, a) => {\n            return (a.vote_average - b.vote_average);\n          })\n          break;\n        case 'less':\n          state[state.sorting.type].sort((a, b) => {\n            return (a.vote_average - b.vote_average);\n          })\n        default:\n          break;\n      }\n      render()\n    },\n    date: () => {\n      switch (state.sorting.date) {\n        case 'new':\n          state[state.sorting.type].sort((b, a) => {\n            if (b.release_date > a.release_date) {\n              return -1\n            }\n            if (b.release_date < a.release_date) {\n              return 1\n            }\n            return 0\n          })\n          break;\n        case 'old':\n          state[state.sorting.type].sort((a, b) => {\n            if (b.release_date > a.release_date) {\n              return -1\n            }\n            if (b.release_date < a.release_date) {\n              return 1\n            }\n            return 0\n          })\n        default:\n          break;\n      }\n      render()\n    },\n  }\n\n  const setActiveFilter = (filterName, filterType) => {\n    const elements = document.querySelectorAll(`[data-name=\"${filterName}\"]`);\n    elements.forEach((element) => {\n      element.classList.remove('active');\n      if (element.dataset.type === filterType) {\n        element.classList.add('active');\n      }\n    })\n  }\n\n  const filtersClickHandle = (e) => {\n    e.preventDefault();\n    const target = e.target;\n    const filterName = target.dataset.name;\n    const filterType = target.dataset.type;\n    state.sorting[filterName] = filterType;\n    filtersActions[filterName]();\n    setActiveFilter(filterName, filterType);\n  }\n\n  const renderModal = (data) => {\n    const {\n      id,\n      title,\n      poster_path,\n      genres,\n      vote_average,\n      overview,\n      homepage\n    } = data;\n    const modalContent = new Modal(id, title, poster_path, genres, vote_average, overview, homepage);\n    elements.modal.innerHTML = '';\n    elements.modal.append(modalContent.render());\n    hidePreloader();\n    elements.modal.classList.toggle('modal--show');\n    elements.body.style.overflow = 'hidden';\n    const modalCloseBtn = elements.modal.querySelector('.modal__close');\n    modalCloseBtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      elements.modal.classList.remove('modal--show');\n      elements.body.style.overflow = '';\n    })\n  }\n\n  const getMovieInfo = async () => {\n    const itemType = (state.sorting.type === 'moviesList') ? 'movie' : 'tv';\n    const movieInfo = await new DBservice().getItemInfo(state.currentMovieId, itemType, state.sorting.type, state.sorting.lang);\n    renderModal(movieInfo);\n  };\n\n  const itemClickHandler = (e) => {\n    e.preventDefault();\n    const target = e.target.closest('.movies__item');\n    if (target) {\n      const itemId = target.dataset.id;\n      state.currentMovieId = itemId;\n      getMovieInfo();\n      showPreloader();\n    }\n  }\n\n  const getData = async (query) => {\n    showPreloader();\n    state.start = true;\n    start();\n    const moviesList = await new DBservice().getmoviesList(query, state.sorting.lang);\n    const tvShowsList = await new DBservice().gettvShowsList(query, state.sorting.lang);\n    state.moviesList = moviesList;\n    state.tvShowsList = tvShowsList;\n    render(state);\n  }\n\n  const start = () => {\n    if (state.start) {\n      elements.header.classList.remove('header--fullheight');\n      elements.filters.classList.remove('hide');\n      elements.tabsPanel.classList.remove('hide');\n      elements.headerContent.style.transform = '';\n    }\n  }\n\n  const formHandler = (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const searchValue = formData.get('search').trim();\n    form.elements.search.value = '';\n    form.elements.search.blur();\n    // state.start = true;\n    // start();\n    state.query = searchValue;\n    getData(searchValue);\n  }\n\n  const filtersTitleHandler = (e) => {\n    console.log('sdfgsdfg');\n    console.log(elements.filter);\n    e.preventDefault();\n    elements.filter.forEach(item => {\n      item.classList.toggle('hide');\n    })\n  }\n\n  const moveHeader = () => {\n    const windowHeight = window.innerHeight;\n    const headerContentHeight = elements.headerContent.offsetHeight;\n    const headerPosition = windowHeight / 2 - headerContentHeight / 2;\n    elements.headerContent.style.transform = `translateY(${headerPosition}px)`;\n  }\n\n  const state = {\n    start: false,\n    language: 'ru-Ru',\n    moviesList: [],\n    tvShowsList: [],\n    currentPage: 1,\n    resultSize: 6,\n    activeTab: 'moviesList',\n    currentMovieId: null,\n    query: undefined,\n    modal: false,\n    sorting: {\n      popularity: 'up',\n      date: 'new',\n      type: 'moviesList',\n      lang: 'ru-Ru',\n    }\n  }\n\n  moveHeader();\n  getData('marvel', state);\n  filters.forEach(((filter) => {\n    filter.addEventListener('click', filtersClickHandle);\n  }))\n  movies.addEventListener('click', itemClickHandler);\n  elements.moviesPaginationList.addEventListener('click', navigationListClickHandler);\n  elements.moviesSizeList.addEventListener('click', navigationListClickHandler);\n  elements.moviesSizeList.style.display = 'none';\n  form.addEventListener('submit', formHandler);\n  elements.filtersTitle.addEventListener('click', filtersTitleHandler);\n}\n\napp();\n","Modal = class {\n  constructor(id, title, poster_path, genres, vote_average, overview, homepage) {\n    this.id = id;\n    this.title = title;\n    this.poster_path = poster_path;\n    this.genres = genres;\n    this.vote_average = vote_average;\n    this.overview = overview;\n    this.homepage = homepage;\n  }\n\n  getNoPosterImgPath = () => 'img/No_image_available.svg';\n  getApiKey = () => '20ba111713def543aaca200d5d47a284';\n  getUrl = () => 'https://image.tmdb.org/t/p/w300_and_h450_bestv2/';\n\n  getImgPath = (poster_path) => {\n    const posterImg = (poster_path) ? this.getUrl() + poster_path : this.getNoPosterImgPath();\n    return posterImg;\n  }\n\n  getGenresList = () => this.genres.reduce((acc, {\n    name\n  }, index, arr) => {\n    const separator = (index !== arr.length - 1) ? ', ' : '';\n    return `${acc}${name}${separator}`\n  }, '');\n\n  getHomePage = () => {\n    const homePage = (this.homepage) ? `<a class=\"modal__link\" href=\"${this.homepage}\" target=\"_blanc\">Официальная страница</a>` : '';\n    return homePage\n  }\n\n\n  render = () => {\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal__content';\n    modalContent.innerHTML = `\n      <div class=\"modal__poster-wrapper\">\n        <img src=\"${this.getImgPath(this.poster_path)}\" alt=\"\" class=\"modal__poster\">\n      </div>\n      <div class=\"modal__info\">\n      <div class=\"modal__info-wrapper\">\n        <h2 class=\"modal__title\">\n          ${this.title} <span>(2019)</span>\n        </h2>\n        <div class=\"modal__genres modal__info-block\">\n          <h3>Жанр:</h3>\n          <p class=\"modal__genres-list\">\n            ${this.getGenresList()}\n          </p>\n        </div>\n        <div class=\"modal__info-block\">\n          <h3>Рейтинг</h3>\n          <span class=\"modal__rating\">${this.vote_average}</span>\n        </div>\n        <div class=\"modal__info-block\">\n          <h3>Обзор: </h3>\n          <div class=\"modal__overview\">\n            <p>\n              ${this.overview}\n            </p>\n          </div>\n        </div>\n      </div>\n      <h3>${this.getHomePage()}</h3>\n      <div class=\"modal__close\"></div>\n    </div>\n      `\n    return modalContent;\n  }\n\n  get = (value) => {\n    return `${this[value]}`\n  };\n\n  showInfo = () => {\n    console.log(this.title, this.id);\n  }\n}\n","const Movie = class {\n  constructor(id, title, popularity, genres, overview, poster_path, backdrop_path, release_date, vote_average) {\n    this.id = id;\n    this.title = title;\n    this.popularity = popularity;\n    this.genres = genres;\n    this.overview = overview;\n    this.poster_path = poster_path;\n    this.backdrop_path = backdrop_path;\n    this.release_date = release_date;\n    this.vote_average = vote_average;\n  }\n\n  getNoPosterImgPath = () => 'img/No_image_available.svg';\n  getApiKey = () => '20ba111713def543aaca200d5d47a284';\n  getUrl = () => 'https://image.tmdb.org/t/p/w185_and_h278_bestv2';\n  getImgPath = (poster_path) => {\n    const posterImg = (poster_path) ? this.getUrl() + poster_path : this.getNoPosterImgPath();\n    return posterImg;\n  }\n\n  renderMovieCard = () => {\n    const card = document.createElement('li');\n    card.classList.add('movies__item');\n    card.dataset.id = this.id;\n    const voteElem = (this.vote_average) ? `<span class=\"card__vote\">${this.vote_average}</span>` : ''\n    card.innerHTML = `\n    <a href=\"#\" class=\"movies__card card\">\n          ${voteElem}\n          <img src=\"${this.getImgPath(this.poster_path)}\" alt=\"${this.title}\" class=\"card__img\">\n          <h3 class=\"card__title\">${this.title}</h3>\n        </a>\n    `;\n    return card;\n  }\n}\n"]}